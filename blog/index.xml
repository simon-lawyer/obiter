<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Obiter.Ai</title>
<link>https://obiter.ai/blog/index.html</link>
<atom:link href="https://obiter.ai/blog/index.xml" rel="self" type="application/rss+xml"/>
<description>Computational research tools for lawyers</description>
<generator>quarto-1.2.475</generator>
<lastBuildDate>Wed, 19 Apr 2023 00:00:00 GMT</lastBuildDate>
<item>
  <title>Revisting (computationally) an earlier study regarding SCC citation practices</title>
  <dc:creator>Simon Wallace</dc:creator>
  <link>https://obiter.ai/blog/posts/2023-04-19-scc-citations/index.html</link>
  <description><![CDATA[ 



<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->
<p>In 1993, Vaughan Black and Nicholas Richter published <a href="https://digitalcommons.schulichlaw.dal.ca/dlj/vol16/iss2/3/">*Did She Mention My Name: Citation of Academic Authority by the Supreme Court of Canada</a>, 1985-1990* in the Dalhousie Law Journal. The article examined the citation practices of Supreme Court of Canada justices and found that, <em>inter alia</em> SCC judges cited 2 scholarly texts per judgement.</p>
<p><img src="https://obiter.ai/blog/posts/2023-04-19-scc-citations/https:/obiter.ai/blog/posts/2023-04-19-scc-citations/judge_prof.jpg" class="img-fluid"></p>
<p>To my knowledge, the study has not been repeated since. And little wonder: it was a labour intensive project. In addition to the two co-authors, the research team appears to have included three research assistants. They would review each set of judgements issued by the SCC, identify the citations, and then manually build a dataset.</p>
<p>In this notebook, I want to show how how we can use computational methodologies to repeat and extend this study with just a few hours of work. We will see how it goes, but my plan is to answer two questions:</p>
<ul>
<li>are SCC judges citing more or fewer scholarly texts per decision?</li>
<li>who is cited the most?</li>
</ul>
<p>My main ambition is to showcase what can be done when researchers have ready access to lots of legal data. Until recently, it was difficult for researchers to access law in bulk. Fortunately, Professor Sean Rehaag of Osgoode Hall Law School just published a <a href="https://refugeelab.ca/bulk-data/scc/">comprehensive dataset of SCC judgements</a>. I want to show one way how researchers can interact with this dataset.</p>
<p>We will begin by downloading the dataset and loading it into a Pandas dataframe. Pandas is like Excel for Python. It is a powerful tool for working with data. We will use it to clean the data and to answer our questions.</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;">#first we import pandas to manage and manipulate the data</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;">#we use the json library to read the data</span></span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> json</span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;">#we use requests to download the data</span></span>
<span id="cb1-6"><span class="im" style="color: #00769E;">import</span> requests</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;"># Set variables</span></span>
<span id="cb1-9">start_year <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1990</span>  <span class="co" style="color: #5E5E5E;"># We will pick up from the last year studied by Black and Richter</span></span>
<span id="cb1-10">end_year <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">2022</span>  <span class="co" style="color: #5E5E5E;"># Last year of data sought (2022 -)</span></span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="co" style="color: #5E5E5E;"># load data</span></span>
<span id="cb1-13">base_ulr <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'https://raw.githubusercontent.com/Refugee-Law-Lab/scc_bulk_data/master/DATA/YEARLY/'</span></span>
<span id="cb1-14"></span>
<span id="cb1-15"><span class="co" style="color: #5E5E5E;"># retrieve the data</span></span>
<span id="cb1-16">results <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb1-17"><span class="cf" style="color: #003B4F;">for</span> year <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(start_year, end_year<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span>):</span>
<span id="cb1-18">    url <span class="op" style="color: #5E5E5E;">=</span> base_ulr <span class="op" style="color: #5E5E5E;">+</span> <span class="ss" style="color: #20794D;">f'</span><span class="sc" style="color: #5E5E5E;">{</span>year<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">.json'</span></span>
<span id="cb1-19">    results.extend(requests.get(url).json())</span>
<span id="cb1-20"></span>
<span id="cb1-21"><span class="co" style="color: #5E5E5E;"># convert to dataframe</span></span>
<span id="cb1-22">df <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(results)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="42">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># filter by language</span></span>
<span id="cb2-2">df <span class="op" style="color: #5E5E5E;">=</span> df[df[<span class="st" style="color: #20794D;">'language'</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'en'</span>]</span></code></pre></div>
</div>
<p>Now we can take a look at the data. Let’s begin by looking at the first five rows.</p>
<div class="cell" data-execution_count="43">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">df.head(<span class="dv" style="color: #AD0000;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="43">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>citation</th>
      <th>citation2</th>
      <th>year</th>
      <th>name</th>
      <th>language</th>
      <th>decision_date</th>
      <th>source_url</th>
      <th>scraped_timestamp</th>
      <th>unofficial_text</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>[1990] 1 SCR 1005</td>
      <td></td>
      <td>1990</td>
      <td>R. v. Fitzgibbon</td>
      <td>en</td>
      <td>1990-05-17</td>
      <td>https://decisions.scc-csc.ca/scc-csc/scc-csc/e...</td>
      <td>2022-09-01</td>
      <td>R. v. Fitzgibbon\nCollection\nSupreme Court Ju...</td>
    </tr>
    <tr>
      <th>1</th>
      <td>[1990] 1 SCR 1020</td>
      <td></td>
      <td>1990</td>
      <td>R. v. Saunders</td>
      <td>en</td>
      <td>1990-05-17</td>
      <td>https://decisions.scc-csc.ca/scc-csc/scc-csc/e...</td>
      <td>2022-09-01</td>
      <td>R. v. Saunders\nCollection\nSupreme Court Judg...</td>
    </tr>
    <tr>
      <th>2</th>
      <td>[1990] 1 SCR 1025</td>
      <td></td>
      <td>1990</td>
      <td>R. v. Sioui</td>
      <td>en</td>
      <td>1990-05-24</td>
      <td>https://decisions.scc-csc.ca/scc-csc/scc-csc/e...</td>
      <td>2022-09-01</td>
      <td>R. v. Sioui\nCollection\nSupreme Court Judgmen...</td>
    </tr>
    <tr>
      <th>3</th>
      <td>[1990] 1 SCR 1075</td>
      <td></td>
      <td>1990</td>
      <td>R. v. Sparrow</td>
      <td>en</td>
      <td>1990-05-31</td>
      <td>https://decisions.scc-csc.ca/scc-csc/scc-csc/e...</td>
      <td>2022-09-01</td>
      <td>R. v. Sparrow\nCollection\nSupreme Court Judgm...</td>
    </tr>
    <tr>
      <th>4</th>
      <td>[1990] 1 SCR 1123</td>
      <td></td>
      <td>1990</td>
      <td>Reference re ss.&nbsp;193 and 195.1(1)(C) of the cr...</td>
      <td>en</td>
      <td>1990-05-31</td>
      <td>https://decisions.scc-csc.ca/scc-csc/scc-csc/e...</td>
      <td>2022-09-01</td>
      <td>Reference re ss. 193 and 195.1(1)(C) of the cr...</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="44">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">df.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="44">
<pre><code>(2677, 9)</code></pre>
</div>
</div>
<p>This shows us how the data looks. On each row we have the citation, the year, the language, the decision_date, the source_url, the time Professor Rehaag scraped the data, at the text.</p>
<p>The interesting thing for our purposes (take my word for it, I won’t reproduce a judgement here) is that the beginning of each SCC case includes a section entitled ‘Authors cited’ right before a section that always begins in capital letters explaining where the matter was appealed from. We can try to computationally isolate that section. We will use some regex magic to do this.</p>
<div class="cell" data-execution_count="46">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;">import</span> re</span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="kw" style="color: #003B4F;">def</span> split_on_three_uppercase_letters(s):</span>
<span id="cb6-4">    <span class="co" style="color: #5E5E5E;"># Define a regex pattern to match three uppercase letters in a row</span></span>
<span id="cb6-5">    pattern <span class="op" style="color: #5E5E5E;">=</span> <span class="vs" style="color: #20794D;">r'[A-Z]</span><span class="sc" style="color: #5E5E5E;">{3}</span><span class="vs" style="color: #20794D;">'</span></span>
<span id="cb6-6">    <span class="co" style="color: #5E5E5E;"># Use re.split to split the string based on the pattern</span></span>
<span id="cb6-7">    result <span class="op" style="color: #5E5E5E;">=</span> re.split(pattern, s)</span>
<span id="cb6-8">    <span class="cf" style="color: #003B4F;">return</span> result</span>
<span id="cb6-9"></span>
<span id="cb6-10"><span class="co" style="color: #5E5E5E;">#split the text on the first occurence of 'Authors Cited'</span></span>
<span id="cb6-11">first <span class="op" style="color: #5E5E5E;">=</span> df.loc[<span class="dv" style="color: #AD0000;">0</span>, <span class="st" style="color: #20794D;">'unofficial_text'</span>].split(<span class="st" style="color: #20794D;">'Authors Cited'</span>)[<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb6-12"></span>
<span id="cb6-13"><span class="co" style="color: #5E5E5E;">#split the text as soon as three uppercase letters are found</span></span>
<span id="cb6-14">result <span class="op" style="color: #5E5E5E;">=</span> split_on_three_uppercase_letters(first)[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb6-15"></span>
<span id="cb6-16"><span class="bu" style="color: null;">print</span>(result)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Canada. Law Reform Commission. Working Paper 5. Restitution and Compensation. Ottawa: Information Canada, 1974.
Duncan, Lewis. Bankruptcy in Canada, 3rd ed. By Lewis Duncan and John D. Honsberger. Toronto: Canadian Legal Authors, 1961.
</code></pre>
</div>
</div>
<p>Great! That worked really well. Let’s break up the data a bit more so each citation is isolated.</p>
<div class="cell" data-execution_count="47">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">cites <span class="op" style="color: #5E5E5E;">=</span> [citation <span class="cf" style="color: #003B4F;">for</span> citation <span class="kw" style="color: #003B4F;">in</span> result.split(<span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">'</span>) <span class="cf" style="color: #003B4F;">if</span> citation <span class="op" style="color: #5E5E5E;">!=</span> <span class="st" style="color: #20794D;">''</span>]</span>
<span id="cb8-2">cites</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="47">
<pre><code>['Canada. Law Reform Commission. Working Paper 5. Restitution and Compensation. Ottawa: Information Canada, 1974.',
 'Duncan, Lewis. Bankruptcy in Canada, 3rd ed. By Lewis Duncan and John D. Honsberger. Toronto: Canadian Legal Authors, 1961.']</code></pre>
</div>
</div>
<p>Now let’s try to run this accross the entire dataset. There will certainly be problems that arise, but we can deal with them as they come up. We are going to make a new dataframe with citations.</p>
<div class="cell" data-execution_count="48">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">master <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame()</span>
<span id="cb10-2">count <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb10-3"><span class="cf" style="color: #003B4F;">for</span> idx,row <span class="kw" style="color: #003B4F;">in</span> df.iterrows():</span>
<span id="cb10-4">    <span class="cf" style="color: #003B4F;">try</span>:</span>
<span id="cb10-5">        first <span class="op" style="color: #5E5E5E;">=</span> row[<span class="st" style="color: #20794D;">'unofficial_text'</span>].split(<span class="st" style="color: #20794D;">'Authors Cited'</span>)[<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb10-6">        result <span class="op" style="color: #5E5E5E;">=</span> split_on_three_uppercase_letters(first)[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb10-7">        cites <span class="op" style="color: #5E5E5E;">=</span> [citation <span class="cf" style="color: #003B4F;">for</span> citation <span class="kw" style="color: #003B4F;">in</span> result.split(<span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">'</span>) <span class="cf" style="color: #003B4F;">if</span> citation <span class="op" style="color: #5E5E5E;">!=</span> <span class="st" style="color: #20794D;">''</span>]</span>
<span id="cb10-8">        <span class="cf" style="color: #003B4F;">for</span> citation <span class="kw" style="color: #003B4F;">in</span> cites:</span>
<span id="cb10-9">            row_df <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;">'year'</span>: [row[<span class="st" style="color: #20794D;">'year'</span>]],</span>
<span id="cb10-10">                            <span class="st" style="color: #20794D;">'decision_citation'</span>: [row[<span class="st" style="color: #20794D;">'citation'</span>]],</span>
<span id="cb10-11">                            <span class="st" style="color: #20794D;">'cites'</span>: [citation]})</span>
<span id="cb10-12">            master <span class="op" style="color: #5E5E5E;">=</span> pd.concat([master, row_df], axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>, ignore_index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb10-13">    <span class="cf" style="color: #003B4F;">except</span>:</span>
<span id="cb10-14">        count <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb10-15"></span>
<span id="cb10-16"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'There were </span><span class="sc" style="color: #5E5E5E;">{</span>count<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> cases where this method failed.'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>There were 1115 cases where this method failed.</code></pre>
</div>
</div>
<p>So right away we get an error. It looks like in this decision there isn’t a section entitled ‘Authors cited’. Let’s take a look at the text.</p>
<p>So there were 1115 cases where this didn’t work. We can see what this was of the total by looking at the shape of the dataframe.</p>
<div class="cell" data-execution_count="57">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'The dataframe has these dimensions: </span><span class="sc" style="color: #5E5E5E;">{</span>df<span class="sc" style="color: #5E5E5E;">.</span>shape<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">.'</span>)</span>
<span id="cb12-2">math <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">int</span>((<span class="dv" style="color: #AD0000;">1115</span><span class="op" style="color: #5E5E5E;">/</span>df.shape[<span class="dv" style="color: #AD0000;">0</span>])<span class="op" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb12-3"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'This method failed on </span><span class="sc" style="color: #5E5E5E;">{</span>math<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">% of the cases.'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The dataframe has these dimensions: (2677, 9).
This method failed on 41% of the cases.</code></pre>
</div>
</div>
<p>It is probable that many of these cases just don’t cite scholarly work. That would be our first interesting finding. But let’s look to see if we can confirm that.</p>
<div class="cell" data-execution_count="59">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">df[<span class="st" style="color: #20794D;">'unofficial_text'</span>].<span class="bu" style="color: null;">str</span>.contains(<span class="st" style="color: #20794D;">'Authors Cited'</span>).value_counts()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="59">
<pre><code>True     1562
False    1115
Name: unofficial_text, dtype: int64</code></pre>
</div>
</div>
<p>Confirmed. If this were a real study, we would need to sample some decisions to confirm that that’s the case. But for now let’s assume that it is.</p>
<p>Let’s see what we can learn about our citations by plotting the number of citations each year and the average number of citations per case, per year.</p>
<div class="cell" data-execution_count="68">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">master.groupby(<span class="st" style="color: #20794D;">'year'</span>)[<span class="st" style="color: #20794D;">'decision_citation'</span>].count().plot()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="68">
<pre><code>&lt;AxesSubplot: xlabel='year'&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://obiter.ai/blog/posts/2023-04-19-scc-citations/index_files/figure-html/cell-11-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="179">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">master</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="179">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>year</th>
      <th>decision_citation</th>
      <th>cites</th>
      <th>authors</th>
      <th>title</th>
      <th>publication</th>
      <th>year_pub</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1990</td>
      <td>[1990] 1 SCR 1005</td>
      <td>Canada. Law Reform Commission. Working Paper 5...</td>
      <td>Canada. Law Reform Commission</td>
      <td>Restitution and Compensation</td>
      <td>Working Paper 5</td>
      <td>1974</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1990</td>
      <td>[1990] 1 SCR 1005</td>
      <td>Duncan, Lewis. Bankruptcy in Canada, 3rd ed. B...</td>
      <td>Duncan, Lewis; Honsberger, John D.</td>
      <td>Bankruptcy in Canada, 3rd ed.</td>
      <td>Book</td>
      <td>1961</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1990</td>
      <td>[1990] 1 SCR 1025</td>
      <td>Canadian Archives: Documents relating to the C...</td>
      <td>Shortt, Adam; Dought, Arthur G.</td>
      <td>Documents relating to the Constitutional Histo...</td>
      <td>Book</td>
      <td>1907</td>
    </tr>
    <tr>
      <th>3</th>
      <td>1990</td>
      <td>[1990] 1 SCR 1025</td>
      <td>Colden, Cadwallader. The History of the Five I...</td>
      <td>Colden, Cadwallader</td>
      <td>The History of the Five Indian Nations of Canada</td>
      <td>book</td>
      <td>1747</td>
    </tr>
    <tr>
      <th>4</th>
      <td>1990</td>
      <td>[1990] 1 SCR 1025</td>
      <td>Garneau, François Xavier. Histoire du Canada f...</td>
      <td>Garneau, François Xavier</td>
      <td>Histoire du Canada français, t. 3</td>
      <td>Les Amis de l'Histoire</td>
      <td>1969</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>10458</th>
      <td>2022</td>
      <td>2022 SCC 9</td>
      <td>Lederman, Sidney N., Alan W. Bryant and Michel...</td>
      <td>Lederman, Sidney N.; Bryant, Alan W.; Fuerst, ...</td>
      <td>Sopinka, Lederman &amp; Bryant: The Law of Evidenc...</td>
      <td>book</td>
      <td>2018</td>
    </tr>
    <tr>
      <th>10459</th>
      <td>2022</td>
      <td>2022 SCC 9</td>
      <td>McWilliams’ Canadian Criminal Evidence, vols. ...</td>
      <td>Hill, S. Casey; Tanovich, David M.; Strezos, L...</td>
      <td>McWilliams’ Canadian Criminal Evidence, vols. ...</td>
      <td>na</td>
      <td>2022</td>
    </tr>
    <tr>
      <th>10460</th>
      <td>2022</td>
      <td>2022 SCC 9</td>
      <td>Paciocco, David M., Palma Paciocco and Lee Stu...</td>
      <td>Paciocco, David M.; Paciocco, Palma; Stuesser,...</td>
      <td>The Law of Evidence, 8th ed.</td>
      <td>book</td>
      <td>2020</td>
    </tr>
    <tr>
      <th>10461</th>
      <td>2022</td>
      <td>2022 SCC 9</td>
      <td>Salhany, Roger E. Canadian Criminal Procedure,...</td>
      <td>Salhany, Roger E.</td>
      <td>Canadian Criminal Procedure, vol. 1</td>
      <td>book</td>
      <td>2021</td>
    </tr>
    <tr>
      <th>10462</th>
      <td>2022</td>
      <td>2022 SCC 9</td>
      <td>Wright, Cecil A. “The Law of Evidence: Present...</td>
      <td>Wright, Cecil A.</td>
      <td>The Law of Evidence: Present and Future</td>
      <td>Can. Bar Rev.</td>
      <td>1942</td>
    </tr>
  </tbody>
</table>
<p>10463 rows × 7 columns</p>
</div>
</div>
</div>
<div class="cell" data-execution_count="188">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;"># group by year and case, then count number of citations</span></span>
<span id="cb19-2">citations_count <span class="op" style="color: #5E5E5E;">=</span> master.groupby([<span class="st" style="color: #20794D;">'year'</span>, <span class="st" style="color: #20794D;">'decision_citation'</span>])[<span class="st" style="color: #20794D;">'cites'</span>].count()</span>
<span id="cb19-3"></span>
<span id="cb19-4"><span class="co" style="color: #5E5E5E;"># calculate the mean of the citations count per case per year</span></span>
<span id="cb19-5">avg_citations <span class="op" style="color: #5E5E5E;">=</span> citations_count.groupby(level<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'year'</span>).mean()</span>
<span id="cb19-6">avg_citations.plot()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="188">
<pre><code>&lt;AxesSubplot: xlabel='year'&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://obiter.ai/blog/posts/2023-04-19-scc-citations/index_files/figure-html/cell-13-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>So this shows that, for cases where there was a citation, the total number of citations per year looks to be trending down but, at least in the past few years, the average number of citations per case might be trending up a bit. The data is very noisy so it’s hard to draw firm conclusions.</p>
<p>Now let’s use some modern AI to build a more impressive dataset. I am going to use the AI models that power ChatGPT to extract information from each citation. In particular, I’m interested in getting the author and the title of the piece. We will also see if we can get the year of publication and the journal title, if available. Here, the art is to develop a prompt that explains to the AI model what we want it to return. Let’s begin with some tests.</p>
<div class="cell" data-execution_count="99">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="im" style="color: #00769E;">import</span> openai</span>
<span id="cb21-2"><span class="im" style="color: #00769E;">import</span> ast</span></code></pre></div>
</div>
<div class="cell" data-execution_count="77">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">test_cites <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">list</span>(master.loc[<span class="dv" style="color: #AD0000;">0</span>:<span class="dv" style="color: #AD0000;">5</span>,<span class="st" style="color: #20794D;">'cites'</span>])</span>
<span id="cb22-2">test_cites</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="77">
<pre><code>['Canada. Law Reform Commission. Working Paper 5. Restitution and Compensation. Ottawa: Information Canada, 1974.',
 'Duncan, Lewis. Bankruptcy in Canada, 3rd ed. By Lewis Duncan and John D. Honsberger. Toronto: Canadian Legal Authors, 1961.',
 "Canadian Archives: Documents relating to the Constitutional History of Canada 1759-1791, 2nd and rev. ed., Part I. Edited by Adam Shortt and Arthur G. Dought. Ottawa: King's Printer.",
 'Colden, Cadwallader. The History of the Five Indian Nations of Canada. London: T. Osborne, 1747.',
 "Garneau, François Xavier. Histoire du Canada français, t. 3. Montréal: Les Amis de l'Histoire, 1969.",
 "Jésuites. Relations des jésuites contenant ce qui s'est passé de plus remarquable dans les missions des Pères de la Compagnie de Jésus dans la Nouvelle‑France, vol. 2. Québec: Augustin Côté, 1858."]</code></pre>
</div>
</div>
<p>Now that we have these five citations, let’s write a prompt that will extract information from them.</p>
<div class="cell" data-execution_count="134">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">prompt <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""</span></span>
<span id="cb24-2"><span class="st" style="color: #20794D;">You are a tool used to extract bibliographic inforamtion from a citation.</span></span>
<span id="cb24-3"><span class="st" style="color: #20794D;">Only return a dictionary object. Do not provide any other ouput.</span></span>
<span id="cb24-4"><span class="st" style="color: #20794D;">Make sure all the keys are lowercase.</span></span>
<span id="cb24-5"><span class="st" style="color: #20794D;">I will give you a citation and it is your job to return a dictionary object with the following keys:</span></span>
<span id="cb24-6"><span class="st" style="color: #20794D;">-authors: (semi-colon separated list authors). This list should be of all the authors by last name, comma, first name. Do not include any middle initials.</span></span>
<span id="cb24-7"><span class="st" style="color: #20794D;">-title: title of paper or book</span></span>
<span id="cb24-8"><span class="st" style="color: #20794D;">-title of publication: journal the paper was published in. If it was published as a book, just say book. If it was published as a chapter in a book, return the title of the book</span></span>
<span id="cb24-9"><span class="st" style="color: #20794D;">-year of publication: year it was published in</span></span>
<span id="cb24-10"></span>
<span id="cb24-11"><span class="st" style="color: #20794D;">The most important thing is that the return be a dictionary object.</span></span>
<span id="cb24-12"><span class="st" style="color: #20794D;">Do not provide feedback or explanations. Only return dictionary objects.</span></span>
<span id="cb24-13"><span class="st" style="color: #20794D;">Do not provide notes. If you need to make a judgement call, make a judgement call. You are not verbose.</span></span>
<span id="cb24-14"><span class="st" style="color: #20794D;">If the answer to any query is null, return "na" in quotation marks (like this: "na")."""</span></span></code></pre></div>
</div>
<p>Now let’s run the test.</p>
<div class="cell" data-execution_count="193">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="cf" style="color: #003B4F;">for</span> test <span class="kw" style="color: #003B4F;">in</span> test_cites:</span>
<span id="cb25-2">    res <span class="op" style="color: #5E5E5E;">=</span> openai.ChatCompletion.create(</span>
<span id="cb25-3">      model<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"gpt-3.5-turbo"</span>,</span>
<span id="cb25-4">      messages<span class="op" style="color: #5E5E5E;">=</span>[</span>
<span id="cb25-5">            {<span class="st" style="color: #20794D;">"role"</span>: <span class="st" style="color: #20794D;">"system"</span>, <span class="st" style="color: #20794D;">"content"</span>: prompt},</span>
<span id="cb25-6">            {<span class="st" style="color: #20794D;">"role"</span>: <span class="st" style="color: #20794D;">"user"</span>, <span class="st" style="color: #20794D;">"content"</span>: test},</span>
<span id="cb25-7">        ]</span>
<span id="cb25-8">    )</span>
<span id="cb25-9">    <span class="bu" style="color: null;">print</span>(test)</span>
<span id="cb25-10">    <span class="bu" style="color: null;">print</span>(res[<span class="st" style="color: #20794D;">'choices'</span>][<span class="dv" style="color: #AD0000;">0</span>][<span class="st" style="color: #20794D;">'message'</span>][<span class="st" style="color: #20794D;">'content'</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Canada. Law Reform Commission. Working Paper 5. Restitution and Compensation. Ottawa: Information Canada, 1974.
{
    "authors": "Commission, Canada Law Reform",
    "title": "Restitution and Compensation",
    "title of publication": "Working Paper 5",
    "year of publication": "1974"
}
Duncan, Lewis. Bankruptcy in Canada, 3rd ed. By Lewis Duncan and John D. Honsberger. Toronto: Canadian Legal Authors, 1961.
{'authors': 'Duncan, Lewis; Honsberger, John D.',
 'title': 'Bankruptcy in Canada, 3rd ed.',
 'title of publication': 'Book',
 'year of publication': '1961'}
Canadian Archives: Documents relating to the Constitutional History of Canada 1759-1791, 2nd and rev. ed., Part I. Edited by Adam Shortt and Arthur G. Dought. Ottawa: King's Printer.
{
    "authors": "Shortt, Adam G.; Dought, Arthur G.",
    "title": "Documents relating to the Constitutional History of Canada 1759-1791",
    "title of publication": "Book",
    "year of publication": "1907"
}
Colden, Cadwallader. The History of the Five Indian Nations of Canada. London: T. Osborne, 1747.
{'authors': 'Colden, Cadwallader', 'title': 'The History of the Five Indian Nations of Canada', 'title of publication': 'book', 'year of publication': '1747'}
Garneau, François Xavier. Histoire du Canada français, t. 3. Montréal: Les Amis de l'Histoire, 1969.
{
  "authors": "Garneau, François Xavier",
  "title": "Histoire du Canada français, t. 3",
  "title of publication": "Les Amis de l'Histoire",
  "year of publication": "1969"
}
Jésuites. Relations des jésuites contenant ce qui s'est passé de plus remarquable dans les missions des Pères de la Compagnie de Jésus dans la Nouvelle‑France, vol. 2. Québec: Augustin Côté, 1858.
{
  "authors": "Jésuites",
  "title": "Relations des jésuites contenant ce qui s'est passé de plus remarquable dans les missions des Pères de la Compagnie de Jésus dans la Nouvelle‑France, vol. 2",
  "title of publication": "na",
  "year of publication": "1858"
}</code></pre>
</div>
</div>
<p>This looks very good. We’ll run it for the whole dataset now. This will incur some costs, and take a few hours, so be mindful.</p>
<div class="cell" data-execution_count="155">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="cf" style="color: #003B4F;">for</span> idx,row <span class="kw" style="color: #003B4F;">in</span> master.iterrows():</span>
<span id="cb27-2">    <span class="cf" style="color: #003B4F;">if</span> idx <span class="op" style="color: #5E5E5E;">%</span> <span class="dv" style="color: #AD0000;">100</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb27-3">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"This is iteration </span><span class="sc" style="color: #5E5E5E;">{</span>idx<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb27-4">    </span>
<span id="cb27-5">    cite <span class="op" style="color: #5E5E5E;">=</span> row[<span class="st" style="color: #20794D;">'cites'</span>]</span>
<span id="cb27-6">    flag <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'n'</span></span>
<span id="cb27-7">    count <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb27-8">    <span class="cf" style="color: #003B4F;">while</span> flag <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'n'</span>:</span>
<span id="cb27-9">        <span class="cf" style="color: #003B4F;">try</span>:</span>
<span id="cb27-10">            res <span class="op" style="color: #5E5E5E;">=</span> openai.ChatCompletion.create(</span>
<span id="cb27-11">            model<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"gpt-3.5-turbo"</span>,</span>
<span id="cb27-12">            messages<span class="op" style="color: #5E5E5E;">=</span>[</span>
<span id="cb27-13">                    {<span class="st" style="color: #20794D;">"role"</span>: <span class="st" style="color: #20794D;">"system"</span>, <span class="st" style="color: #20794D;">"content"</span>: prompt},</span>
<span id="cb27-14">                    {<span class="st" style="color: #20794D;">"role"</span>: <span class="st" style="color: #20794D;">"user"</span>, <span class="st" style="color: #20794D;">"content"</span>: cite},</span>
<span id="cb27-15">                ]</span>
<span id="cb27-16">            )</span>
<span id="cb27-17">            </span>
<span id="cb27-18">            answer <span class="op" style="color: #5E5E5E;">=</span> ast.literal_eval(res[<span class="st" style="color: #20794D;">'choices'</span>][<span class="dv" style="color: #AD0000;">0</span>][<span class="st" style="color: #20794D;">'message'</span>][<span class="st" style="color: #20794D;">'content'</span>])</span>
<span id="cb27-19">            master.loc[idx,<span class="st" style="color: #20794D;">'authors'</span>] <span class="op" style="color: #5E5E5E;">=</span> answer[<span class="st" style="color: #20794D;">'authors'</span>]</span>
<span id="cb27-20">            master.loc[idx,<span class="st" style="color: #20794D;">'title'</span>] <span class="op" style="color: #5E5E5E;">=</span> answer[<span class="st" style="color: #20794D;">'title'</span>]</span>
<span id="cb27-21">            master.loc[idx,<span class="st" style="color: #20794D;">'publication'</span>] <span class="op" style="color: #5E5E5E;">=</span> answer[<span class="st" style="color: #20794D;">'title of publication'</span>]</span>
<span id="cb27-22">            master.loc[idx,<span class="st" style="color: #20794D;">'year_pub'</span>] <span class="op" style="color: #5E5E5E;">=</span> answer[<span class="st" style="color: #20794D;">'year of publication'</span>]</span>
<span id="cb27-23">            flag <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'y'</span></span>
<span id="cb27-24">        <span class="cf" style="color: #003B4F;">except</span>:</span>
<span id="cb27-25">            count <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb27-26">            <span class="cf" style="color: #003B4F;">if</span> count <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">5</span>:</span>
<span id="cb27-27">                <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'error </span><span class="sc" style="color: #5E5E5E;">{</span>idx<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb27-28">                flag <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'y'</span></span>
<span id="cb27-29">                master.loc[idx,<span class="st" style="color: #20794D;">'authors'</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'error'</span></span>
<span id="cb27-30">                master.loc[idx,<span class="st" style="color: #20794D;">'title'</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'error'</span></span>
<span id="cb27-31">                master.loc[idx,<span class="st" style="color: #20794D;">'publication'</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'error'</span></span>
<span id="cb27-32">                master.loc[idx,<span class="st" style="color: #20794D;">'year_pub'</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'error'</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>This is iteration 0
This is iteration 100
This is iteration 200
This is iteration 300
This is iteration 400
This is iteration 500
This is iteration 600
This is iteration 700
This is iteration 800
This is iteration 900
This is iteration 1000
This is iteration 1100
This is iteration 1200
This is iteration 1300
This is iteration 1400
This is iteration 1500
This is iteration 1600
This is iteration 1700
This is iteration 1800
This is iteration 1900
This is iteration 2000
This is iteration 2100
This is iteration 2200
error 2204
error 2268
This is iteration 2300
error 2322
This is iteration 2400
error 2427
error 2454
This is iteration 2500
This is iteration 2600
This is iteration 2700
This is iteration 2800
This is iteration 2900
This is iteration 3000
This is iteration 3100
This is iteration 3200
This is iteration 3300
This is iteration 3400
This is iteration 3500
This is iteration 3600
This is iteration 3700
This is iteration 3800
This is iteration 3900
error 3978
error 3984
This is iteration 4000
This is iteration 4100
This is iteration 4200
This is iteration 4300
This is iteration 4400
error 4443
This is iteration 4500
This is iteration 4600
This is iteration 4700
This is iteration 4800
This is iteration 4900
This is iteration 5000
This is iteration 5100
This is iteration 5200
This is iteration 5300
This is iteration 5400
This is iteration 5500
This is iteration 5600
This is iteration 5700
This is iteration 5800
error 5871
This is iteration 5900
This is iteration 6000
This is iteration 6100
This is iteration 6200
This is iteration 6300
This is iteration 6400
This is iteration 6500
This is iteration 6600
This is iteration 6700
This is iteration 6800
This is iteration 6900
This is iteration 7000
This is iteration 7100
This is iteration 7200
This is iteration 7300
This is iteration 7400
This is iteration 7500
This is iteration 7600
This is iteration 7700
This is iteration 7800
This is iteration 7900
This is iteration 8000
This is iteration 8100
error 8162
This is iteration 8200
This is iteration 8300
This is iteration 8400
This is iteration 8500
This is iteration 8600
error 8604
This is iteration 8700
This is iteration 8800
This is iteration 8900
error 8905
This is iteration 9000
error 9062
This is iteration 9100
This is iteration 9200
This is iteration 9300
This is iteration 9400
This is iteration 9500
This is iteration 9600
This is iteration 9700
This is iteration 9800
This is iteration 9900
error 9915
This is iteration 10000
This is iteration 10100
This is iteration 10200
This is iteration 10300
This is iteration 10400</code></pre>
</div>
</div>
<p>Let’s save our results:</p>
<div class="cell" data-execution_count="164">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">master.to_csv(<span class="st" style="color: #20794D;">'results.csv'</span>)</span></code></pre></div>
</div>
<p>And now let’s do some exploratory analysis.</p>
<div class="cell" data-execution_count="167">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">master[<span class="st" style="color: #20794D;">'publication'</span>].value_counts().head(<span class="dv" style="color: #AD0000;">30</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="167">
<pre><code>Book                                2832
book                                2039
na                                  1008
Can. Bar Rev.                        181
McGill L.J.                          116
House of Commons Debates             101
Crim. L.Q.                            91
C.R.                                  81
S.C.L.R.                              75
U.T.L.J.                              68
Alta. L. Rev.                         64
Can. Bus. L.J.                        55
R. du B.                              54
Osgoode Hall L.J.                     47
Queen’s L.J.                          45
U.B.C. L. Rev.                        37
Canadian Family Law Quarterly         35
Ottawa L. Rev.                        34
R.G.D.                                33
Harv. L. Rev.                         33
C. de D.                              33
R.J.T.                                32
Queen's L.J.                          27
Sask. L. Rev.                         26
N.J.C.L.                              26
Can. J. Fam. L.                       26
R.F.L.                                25
Man. L.J.                             25
Canada. House of Commons Debates      25
U.T. Fac. L. Rev.                     25
Name: publication, dtype: int64</code></pre>
</div>
</div>
<div class="cell" data-execution_count="192">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">master[<span class="st" style="color: #20794D;">'authors'</span>].value_counts().head(<span class="dv" style="color: #AD0000;">15</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="192">
<pre><code>na                                                     544
Sullivan, Ruth                                         132
Canada, House of Commons                               114
Hogg, Peter W                                           97
Driedger, Elmer A.                                      79
Stuart, Don                                             64
Côté, Pierre-André                                      54
Sopinka, John; Lederman, Sidney N.; Bryant, Alan W.     52
Canada                                                  52
Wigmore, John Henry                                     46
Canada. Law Reform Commission                           42
Hogg, Peter W.                                          39
Côté, Pierre‑André                                      37
Roach, Kent                                             35
Bala, Nicholas                                          33
Name: authors, dtype: int64</code></pre>
</div>
</div>
<p>Ok, we can reach some tentative conclusions to our research questions.</p>
<ol type="1">
<li>The number of non-case citations has been trending down, but there may be a bit of a spike lately per case.</li>
<li>The most cited author is Peter Hogg (he shows up on the list twice). After Professor Hogg, Ruth Sullivan is the most cited scholar.</li>
<li>The most cited journal is the Canadian Bar Review.</li>
</ol>



 ]]></description>
  <guid>https://obiter.ai/blog/posts/2023-04-19-scc-citations/index.html</guid>
  <pubDate>Wed, 19 Apr 2023 00:00:00 GMT</pubDate>
  <media:content url="https://obiter.ai/blog/posts/2023-04-19-scc-citations/judge_prof.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Practical Safe Third Country Advocacy for lawyers</title>
  <dc:creator>Simon Wallace</dc:creator>
  <link>https://obiter.ai/blog/posts/2023-03-25-safe-third/index.html</link>
  <description><![CDATA[ 



<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->
<section id="practical-safe-third-country-agreement-advocacy" class="level2">
<h2 class="anchored" data-anchor-id="practical-safe-third-country-agreement-advocacy">Practical <em>Safe Third Country Agreement</em> Advocacy</h2>
<p>On March 24, 2023, an expanded <a href="https://www.canada.ca/en/immigration-refugees-citizenship/corporate/mandate/policies-operational-instructions-agreements/agreements/safe-third-country-agreement.html"><em>Safe Third Country Agreement</em></a> came into effect. Not all the regulatory details have been published yet, but the purpose of this expansion is to preclude asylum seekers who travel to Canada from the United States of America from claiming refugee protection in Canada.</p>
<p><img src="https://obiter.ai/blog/posts/2023-03-25-safe-third/images/border.jpg" class="img-fluid"></p>
<p>The new agreement tightens a pre-existing framework that prevented most people who traveled to Canada from the US by way of official border crossings from entering Canada to make a refugee claim by now including people who cross into Canada irregularly. If anything, the new rules obviously aim to close semi-official Roxham Road route into Canada used by refugees in the United States who want to come to Canada.</p>
<p>The Supreme Court of Canada is currently considering a challenge to the old agreement and, of this I am certain, there will be new constitutional challenges to the new law. I do not propose to canvas the arguments that may be raised in those cases. Instead, in this post I have a more modest ambition. For a lawyer who is not able to raise a major constitutional challenge on behalf of a client captured by the new agreement, I suggest a practical strategy to base their advocacy on.</p>
<p>Based off of what I can piece together from media reports, the text of the agreement, and American regulatory instruments, it appears that there is a way for lawyers to help <em>some</em> refugees who would otherwise be captured by the agreement to enter Canada to make a claim.</p>
<p>In what follows, I sketch out how lawyers can make practical arguments to allow clients who cross into Canada irregularly to still make claims in Canada. The proposal here does not describe a major assault on the law. Rather, here I sketch out a practical approach that could smooth out some rough edges for some people in rare circumstances.</p>
<p><strong>Bottom line:</strong> The agreement explains that people who make claims within 14 days of crossing into Canada irregularly can be returned to the United States. This means that it is open to claimants and lawyers to ask Canada to delay or defer an examination so that they can make a claim. If the request is unreasonably or unfairly refused, they can challenge the refusal in court.</p>
<p>This mechanism–seek a deferral, litigate refusals–is well trodden path. At best, it offers individualized relief to a small number of people. But as the legal community develops its analyzes and responses to the amended agreement, this is one legal tool that may be useful.</p>
</section>
<section id="what-we-know-about-the-new-agreement-and-the-statutory-context" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="what-we-know-about-the-new-agreement-and-the-statutory-context">What we know about the new agreement and the statutory context</h2>
<div class="page-columns page-full"><p>In March 2023, Canada and the United States executed <a href="https://www.canada.ca/en/immigration-refugees-citizenship/corporate/mandate/policies-operational-instructions-agreements/agreements/safe-third-country-agreement/additional-protocol.html">an agreement</a> that expanded the scope of the existing <strong>Safe Third Country</strong> protocol. The original agreement is simple. It explains that refugees in either the United States or Canada who travel to the other country by way of an official border crossing are not eligible to make a refugee claim in the other country. If an ineligible person tries to claim protection at an official border crossing, they can be returned to the country from which they came.</p><div class="no-row-height column-margin column-container"><span class="">It looks like the agreement came together suddenly because the purported dates of the agreement are off by a year.</span></div></div>
<p>The updated agreement fundamentally describes one new major provision to the existing agreement. Now, people who cross into Canada or the United States <em>irregularly</em> from either country can be returned if they “make a refugee status claim within 14 days after such crossing.”</p>
<p>To the drafter’s credit, this new provision is clear and practical. In the normal course, if a person crosses into Canada irregularly and are apprehended, they can be removed (i.e.&nbsp;deported) expeditiously. The <em>Immigration and Refugee Protection Act</em> (IRPA) explains that people who enter Canada in breach if the law are ‘inadmissible’ and deportable. If an officer forms the opinion that a person is inadmissible, they can refer the person to a hearing (of a sort) where a senior officer will issue a removal order. Provided there are no impediments to removal, that removal order can be expeditiously enforced.</p>
<p>For refugee claimants, the fact of their refugee claim is (or, I should say, was) an impediment to their removal. Usually, refugee claimants formally initiated their claim for protection during their hearing into their inadmissibility.</p>
<p>So, the new agreement functions by, for people who encounter an officer within 14 days of crossing into Canada, eliminating their right to make a claim for refugee protection to delay their removal.</p>
<div class="page-columns page-full"><p>There are three ways to read this 14-day window. First, it looks like this two week window parallels existing American expedited removal programs. This indicates that the Americans want to keep some of their deportation policies lined up.</p><div class="no-row-height column-margin column-container"><span class="">Designating Aliens For Expedited Removal, 69 FR 48877, 48877 (Aug.&nbsp;11, 2004).</span></div></div>
<p>Second, regardless of textual reasons, the overarching purpose is surely to afford border authorities with a margin to operate in. I doubt that the idea here is that border authorities will be in hot pursuit of migrants for 14 days. Instead, I expect that this is an implicit acknowledgement of how the machinery of government can move slowly. Even if someone is apprehended immediately at the border, border agents are still required to assess their case for some exceptions and the receiving state is entitled to request some substantiating information before accepting the person back.</p>
<p>But, third, the 14-day window can also be read as a (limited) legal entitlement to claimants. The drafters of the agreement could have said, for example, that <strong>all</strong> people who cross irregularly into Canada from the United States may be returned, but instead they decided to focus on a narrower subset: those who claim within 14-days.</p>
<p>On the one hand, this reads as an incentive to claimants to go underground for a limited period of time and then make a claim but, on the other, is reads as an invitation. What should a refugee claimant who is apprehended crossing irregularly into Canada do? They should ask that their examination be deferred so that they can initiate their claim outside of the 14-day window.</p>
<p>This type of request is a familiar one for immigration practitioners. Canadian law explains that the government is required to enforce removal orders “as soon as possible,” but courts also acknowledge that there is a limited discretion available to the government to delay or defer some deportations in limited cases. For this reason, it is very common for deportees to ask the government to delay their removal by a few days, a few weeks, or a few months. In some cases, these requests are refused. When that happens, deportees are entitled to apply to the Federal Court of Canada for injunctive relief to prevent their removal.</p>
<p>The suggestion in this post is that the same mechanism can be used by people who cross into Canada irregularly to make a claim. But instead of seeking to defer their removal, they ought to ask to defer their examination and inadmissibility hearing to after the fourteen-day window. If that request is denied (and there is an administrative law error with the decision), they may seek relief in the Federal Court of Canada.</p>
<p>In what kind of circumstances could this strategy provide relief? It is difficult to say at this stage. The jurisprudence will have to develop in a manner responsive to the needs of claimants.</p>
</section>
<section id="practical-implications" class="level2">
<h2 class="anchored" data-anchor-id="practical-implications">Practical implications</h2>
<p>To be clear, the practical strategy sketched out here offers relief in rare cases, not most cases. Neither the government nor the Courts (barring a substantive challenge to the agreement) will countenance the idea that a procedural mechanism could regularly defeat the purpose of the new agreement. But rare and exceptional cases will arise and, for lawyers assisting persons with those cases, this sort of maneuver might provide relief against the sharpest edges of the expanded agreement.</p>


</section>

 ]]></description>
  <guid>https://obiter.ai/blog/posts/2023-03-25-safe-third/index.html</guid>
  <pubDate>Sat, 25 Mar 2023 00:00:00 GMT</pubDate>
  <media:content url="https://obiter.ai/blog/posts/2023-03-25-safe-third/images/border.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Bringing AI to government through the backdoor</title>
  <dc:creator>Simon Wallace</dc:creator>
  <link>https://obiter.ai/blog/posts/2023-03-22-copilot/index.html</link>
  <description><![CDATA[ 



<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->
<section id="ai-comes-to-microsoft-word" class="level1">
<h1>AI comes to Microsoft Word</h1>
<p>Earlier this week Microsoft announced introduced <a href="https://blogs.microsoft.com/blog/2023/03/16/introducing-microsoft-365-copilot-your-copilot-for-work/">365 copilot</a>, an integration across its suite of business applications with OpenAI’s GPT models. Promising a “whole new way to work,” one of copilot’s core features relates to writing. Sometime in “the months ahead,” Microsoft Word will write use large language models to write first drafts, offer feedback, and suggest edits.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://obiter.ai/blog/posts/2023-03-22-copilot/images/automated_decision.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Prompt: “A computer, carefully weighing the evidence, decides whether a person is entitled to social assistance”</figcaption><p></p>
</figure>
</div>
<p>For governments, this technology raises a host of concerns (what are the privacy implications of streaming text to Microsoft’s servers? How secure are the connections? What happens of the AI models aren’t very good in particular domains?) but I want to address a discrete sub-question: would it be legal for IT departments to deploy copilot in Canadian courtrooms and tribunals?</p>
<p>I say probably no, at least for federal tribunals and departments charged with making administrative decisions. And my reason is simple: to do so would run afoul of the <a href="https://www.tbs-sct.canada.ca/pol/doc-eng.aspx?id=32592">Directive on Automated Decision-Making</a>. This said, and this is a matter I return to at the end, the Directive is not as clear as it could or should be on this issue. The Treasury Board of Canada Secretariat, which is responsible for the Directive, is in the process of updating the text. My hope is that the new text will explicitly say that it is not appropriate for government decision makers to use tools that can auto-generate and edit text, especially when the model used to produce that text is proprietary and unreviewable.</p>
<p>The well documented (see, for an example, <a href="https://www.ruhabenjamin.com/race-after-technology">Ruha Benjamin</a>) capacity of AI to reason inappropriately, to deploy racist ways of thinking, to internalize and hide lines of reasoning that would inappropriate for human decision makers to use, all mean that extra care is required when it comes to the use of AI in decision making contexts.</p>
<section id="the-directive-on-automated-decision-making" class="level2">
<h2 class="anchored" data-anchor-id="the-directive-on-automated-decision-making">The Directive on Automated Decision-Making</h2>
<p>The Directive, which came into force in 2019, regulates the use of systems in the federal government that use technology to perform “tasks that would ordinarily require biological brainpower to accomplish, such as making sense of spoken language, learning behaviours, or solving problems.”</p>
<p>When a government department seeks to use an automated decision making tool, the Directive requires the organization to complete at <a href="https://www.canada.ca/en/government/system/digital-government/digital-government-innovations/responsible-use-ai/algorithmic-impact-assessment.html">algorithmic impact assessment</a>. Depending on how the system is assessed, the agency may use the system, may use it after deploying risk mitigation measures, or may not use the system at all.</p>
<p>As of today, 11 federal projects have <a href="https://search.open.canada.ca/opendata/?collection=aia&amp;page=1&amp;sort=date_modified+desc">published</a> their assessments. Most of those assessments (and automated decision making projects) are, interestingly, in the immigration domain.</p>
</section>
<section id="algorithmic-impact-assessment-for-copilot" class="level2">
<h2 class="anchored" data-anchor-id="algorithmic-impact-assessment-for-copilot">Algorithmic Impact Assessment for Copilot</h2>
<p>Would Microsoft’s new copilot feature be caught by the directive? Yes, assuming that a government user is making a decision and is using a Microsoft product with copilot assistance to draft, write, or make the decision.</p>
<p>I completed a theoretical algorithmic impact assessment for copilot to see how it would be treated by the process. I assumed that the stakes for the decision were relatively high but that a human would always review, and potentially modify, any copilot-generated decision or decision content. The assessment, even though the information I supplied was limited, determined that using copilot in a decision-making context had a ‘level 3’ impact, which is the second highest rating available.</p>
<p>Level 3 systems <em>can</em> be used in government, subject to certain limitations. The agency must notify the public about the use of the system, seek independent peer review of the system, ensure all users have training on the system, and get explicit approval from the organizations deputy head to deploy the system.</p>
<p>My view is that these requirements are functionally impossible for any government department to comply with, at least based on what we know about copilot today. Unless Microsoft and OpenAI make their models available to independent auditors, it will be impossible for any government department to conduct the required peer review of the system.</p>
</section>
<section id="reconsidering-the-directive" class="level2">
<h2 class="anchored" data-anchor-id="reconsidering-the-directive">Reconsidering the Directive</h2>
<p>As Treasury Board reconsiders the Directive, copilot raises two issues for consideration.</p>
<p>First, the Directive should be stricter. Originally drafted in 2019, the Directive reads like an out of date document. Its subject is not the generative AI technologies that have flourished in the past six months, but in more traditional machine learning and prediction systems. To state it plainly, there is a qualitative difference between (usually rules-based, usually supervised, and usually deterministic) machine learning systems and programs that can generate bespoke text.</p>
<p>When a person is hired to be an adjudicator to make important decisions, and they are asked to used words and text to justify those decisions, the public expects that that person to write the text. The Directive should say as much.</p>
<p>Second, the Directive’s definitions should be clearer. Right now, reasonable people could disagree about whether copilot is even captured by the Directive. Consider how the Directive defines its scope:</p>
<blockquote class="blockquote">
<p>This Directive applies to any system, tool, or statistical models used to recommend or make an administrative decision about a client.</p>
</blockquote>
<p>But do the terms “recommend” or “make” capture the relationship between a human and a machine, like copilot, that generates and edits text?</p>
<p>Likewise, the Directive’s concept of an “administrative decision” is too narrow because it simply imports the traditional definition used by the Courts for administrative law purposes (i.e.&nbsp;something that “affects legal rights, privileges or interests”).</p>
<p>There is good text already in the Directive that should be the basis of it going forward. Instead of tethering the Directive to the acts of making or recommending administrative decision, the Directive should build out from its excellent definition of ‘automated decision making system,’ which:</p>
<blockquote class="blockquote">
<p>Includes any technology that either assists or replaces the judgement of human decision-makers. These systems draw from fields like statistics, linguistics, and computer science, and use techniques such as rules-based systems, regression, predictive analytics, machine learning, deep learning, and neural nets.</p>
</blockquote>
<p>This definition is considerably clearer and more useful for explaining that the Directive applies whenever an automated system engages in human decision making. Putting this definition explicitly at the centre of the Directive will make it more adaptable as the technology changes and new unanticipated use cases for that technology emerge.</p>
</section>
<section id="summing-up" class="level2">
<h2 class="anchored" data-anchor-id="summing-up">Summing up</h2>
<p>I am sure that Microsoft is going to try to sell copilot licenses to the Government of Canada. The federal government ought to be intentional about how it engages with this technology and decide whether–in the context of adjudication, for example–it is even appropriate to use a tool like copilot.</p>
<p>One way of shaping those decisions in a principled way is to think about how the Directive does, does not, and should interact with new generative AI technology. Here I suggest, first, that the Directive does apply and that it will preclude Canada from deploying copilot (at least in traditional adjudicative spaces). This is because any use of copilot in an adjudicative space will trigger the requirement for peer review of the AI system, which will be impossible because the underlying copilot models are proprietary. Second, I suggest that the Directive should be redrafted to be more explicit about its scope to make it clear the copilot-like technology is off-side in traditional adjudicative spaces.</p>


</section>
</section>

 ]]></description>
  <guid>https://obiter.ai/blog/posts/2023-03-22-copilot/index.html</guid>
  <pubDate>Wed, 22 Mar 2023 00:00:00 GMT</pubDate>
  <media:content url="https://obiter.ai/blog/posts/2023-03-22-copilot/images/automated_decision.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Supreme (AI) Transcripts</title>
  <dc:creator>Simon Wallace</dc:creator>
  <link>https://obiter.ai/blog/posts/2022-12-05-scc-transcripts/index.html</link>
  <description><![CDATA[ 



<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->
<hr>
<p><img src="https://obiter.ai/blog/posts/2022-12-05-scc-transcripts/images/screenshot.png" class="img-fluid"></p>
<hr>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Project Output
</div>
</div>
<div class="callout-body-container callout-body">
<p><a href="https://obiter.ai/scc/">Review the AI transcripts here</a></p>
</div>
</div>
<section id="using-ai-to-increase-access-to-law" class="level3">
<h3 class="anchored" data-anchor-id="using-ai-to-increase-access-to-law">Using AI to increase access to law</h3>
<p>The Supreme Court of Canada is dedicated to promoting public access to its work, and one way it does this is by broadcasting webcasts of most of its hearings on its <a href="https://scc-csc.ca/case-dossier/info/webcasts-webdiffusions-eng.aspx">website</a>. These webcasts are an invaluable resource for anyone interested in the Court’s proceedings, including lawyers, researchers, law students, and journalists. They allow these groups to see how the Court’s judges engage with the issues before them, and to gain a better appreciation of the Court’s work.</p>
<p>However, video can be an imperfect medium for legal analysis. It is telling that most lawyers prefer to work with transcripts of proceedings because they are faster to review and easier to search.</p>
<p>Video and audio are difficult to analyze quantitatively, making it challenging for researchers to explore patterns in argumentation and advocacy. In contrast, in the United States, <a href="https://www.supremecourt.gov/oral_arguments/argument_transcript/2022">transcripts</a> of each Supreme Court case are published, providing researchers with a valuable tool for empirical analysis.</p>
<p>Video also poses accessibility problems. Without closed captions or transcripts, the information in video and audio files is inaccessible to people with some types of sensory disabilities.</p>
<p>To further support access to the Court’s proceedings, and to provide resources to researchers, I have developed an AI transcriptionist that can automatically generate transcripts of the Court’s proceedings from its webcasts. This technology can provide a new user-friendly and accessible way for individuals to access and analyze the Court’s proceedings. It will also enable more comprehensive analyses of the Court’s work, which could provide valuable insights and improve our understanding of Court’s operations.</p>
</section>
<section id="capabilities-of-an-ai-transcriber" class="level3">
<h3 class="anchored" data-anchor-id="capabilities-of-an-ai-transcriber">Capabilities of an AI transcriber</h3>
<p>Today, I am <a href="https://obiter.ai/scc/">publishing 122 transcripts</a>, covering each webcast published between January 1, 2020 and November 3, 2022. Soon, I will open source all of my code. This transcriptionist can:</p>
<ul>
<li>transcribe hours long hearings in seconds;</li>
<li>accurately transcribe French and English;</li>
<li>recognize different speakers;</li>
<li>note when people are speaking over each other; and,</li>
<li>correctly identify Supreme Court of Canada justices.</li>
</ul>
<p>This is an exciting technological moment. For cents on the dollar, an AI transcriptionist can produce a high fidelity, multi-lingual transcript.</p>
<p>This transcriptionist is based on the latest open-source technology. It uses the <a href="https://openai.com/blog/whisper/">whisper</a> and <a href="https://pyannote.github.io">pyannote</a> libraries to accurately transcribe and diarize speech, and the <a href="https://speechbrain.github.io">SpeechBrain</a> library for advanced speech recognition.</p>
</section>
<section id="limitiations-of-ai-transcripts" class="level3">
<h3 class="anchored" data-anchor-id="limitiations-of-ai-transcripts">Limitiations of AI transcripts</h3>
<p>Of course, the transcriptionist is far from perfect, and its outputs should be used cautiously. In some cases, the transcriber inappropriately guess at or hallucinates meaning that is not present in the text. In other cases, it inappropriately repeats itself, getting stuck in its own loop.</p>
<p>Consider this example. The AI was trained on over 600,000 hours of audio and it looks like a lot of that audio was from Youtube. Sometimes the AI thinks it knows what someone will say, based on what it has heard before, but gets it wildly wrong. Here, for example, a lawyer did not actually invite the judges to leave their questions in the comments:</p>
<hr>
<p><img src="https://obiter.ai/blog/posts/2022-12-05-scc-transcripts/images/comments.png" class="img-fluid"></p>
<hr>
<p>Like human transcriptionists, the AI often gets names wrongs and struggles when people speak over each other. Often it won’t quite get the moment of speaker change exactly right, sometimes attributing text to the person who was interrupted over the person who did the interrupting. With further development and time, no doubt the technology will improve.</p>
<p>You will notice that the AI performs better on long texts and poorly on short segments. Notice that each hearing begins with a clerk introducing the Court (‘La Court! The Court!’). Because this introduction is so short and the speaker is distant from the microphone, the AI often gets this introduction wrong.</p>
<p>It is also difficult for the transcriber to consistently apply the same grammar rules to different speakers. My impression is that when people speak slowly and read from a prepared text, the transcriber does a better job if splitting up sentences and applying correct punctuation. As people begin to speak faster, it is harder for the AI to keep up and determine how the text should be organized.</p>


</section>

 ]]></description>
  <guid>https://obiter.ai/blog/posts/2022-12-05-scc-transcripts/index.html</guid>
  <pubDate>Mon, 05 Dec 2022 00:00:00 GMT</pubDate>
  <media:content url="https://obiter.ai/blog/posts/2022-12-05-scc-transcripts/images/screenshot.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Visualizing Mental Health Act Apprehensions in Toronto</title>
  <dc:creator>Simon Wallace</dc:creator>
  <link>https://obiter.ai/blog/posts/2022-10-22-civil-mental-health-apprehensions/index.html</link>
  <description><![CDATA[ 



<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->
<p>The City of Toronto recently a <a href="https://open.toronto.ca/dataset/mental-health-apprehensions/">dataset</a> of civil <em>Mental Health Act</em> apprehensions. In this notebook I show how to use Python to visualize and analyze the data. The <a href="https://data.torontopolice.on.ca/pages/persons-in-crisis">Toronto Police Service</a> has also published its own visualizations. This is a teaching notebook — my goal is to demonstrate one way computational tools can be used for quick and effective analyses of data.</p>
<p>If the code looks daunting, don’t worry! There are lots of great learning resources out there. If you’re entirely new to Python, <a href="https://automatetheboringstuff.com">start here</a>. If you’re ready to start doing data anlaysis, poke around the official <a href="https://pandas.pydata.org/docs/getting_started/index.html">Pandas tutorials</a>.</p>
<p>For this project, we will use pandas to organize the data and seaborn to create the visualizations. I will set out all of my code and methodology. First, let’s import the libraries and load the dataset.</p>
<section id="import-the-libraries-and-the-dataset" class="level2">
<h2 class="anchored" data-anchor-id="import-the-libraries-and-the-dataset">Import the libraries and the dataset</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> seaborn.objects <span class="im" style="color: #00769E;">as</span> so</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">df <span class="op" style="color: #5E5E5E;">=</span> pd.read_json(<span class="st" style="color: #20794D;">'https://ckan0.cf.opendata.inter.prod-toronto.ca/dataset/mental-health-apprehensions/resource/4be57d43-830d-4316-90ac-3b09f31b4e6f/download/mental-health-apprehensions.json'</span>)</span>
<span id="cb2-2"></span>
<span id="cb2-3">df.drop(<span class="st" style="color: #20794D;">'_id'</span>, axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
</div>
</section>
<section id="get-summary-information" class="level2">
<h2 class="anchored" data-anchor-id="get-summary-information">Get summary information</h2>
<p>We can get summary information using the ‘describe’ method:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">df.describe(include<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'all'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>EventUniqueID</th>
      <th>ReportDate</th>
      <th>ReportYear</th>
      <th>ReportMonth</th>
      <th>ReportDayofWeek</th>
      <th>ReportHour</th>
      <th>OccurrenceDate</th>
      <th>OccurrenceYear</th>
      <th>OccurrenceMonth</th>
      <th>OccurrenceDayofWeek</th>
      <th>OccurrenceHour</th>
      <th>ApprehensionType</th>
      <th>Division</th>
      <th>HoodID</th>
      <th>NeighbourhoodName</th>
      <th>PremisesType</th>
      <th>Sex</th>
      <th>AgeGroup</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>count</th>
      <td>87907</td>
      <td>87907</td>
      <td>87907.000000</td>
      <td>87907</td>
      <td>87907</td>
      <td>84849.000000</td>
      <td>87907</td>
      <td>87907.000000</td>
      <td>87907</td>
      <td>87907</td>
      <td>84608.000000</td>
      <td>87907</td>
      <td>87907</td>
      <td>87907</td>
      <td>87907</td>
      <td>87907</td>
      <td>87907</td>
      <td>87907</td>
    </tr>
    <tr>
      <th>unique</th>
      <td>87678</td>
      <td>3103</td>
      <td>NaN</td>
      <td>12</td>
      <td>7</td>
      <td>NaN</td>
      <td>3116</td>
      <td>NaN</td>
      <td>12</td>
      <td>7</td>
      <td>NaN</td>
      <td>5</td>
      <td>18</td>
      <td>141</td>
      <td>141</td>
      <td>7</td>
      <td>3</td>
      <td>7</td>
    </tr>
    <tr>
      <th>top</th>
      <td>GO-2019798628</td>
      <td>2022-06-01T04:00:00</td>
      <td>NaN</td>
      <td>May</td>
      <td>Thursday</td>
      <td>NaN</td>
      <td>2022-06-01T04:00:00</td>
      <td>NaN</td>
      <td>May</td>
      <td>Thursday</td>
      <td>NaN</td>
      <td>Mha Sec 17 (Power Of App)</td>
      <td>D14</td>
      <td>75</td>
      <td>Church-Yonge Corridor (75)</td>
      <td>Apartment</td>
      <td>Male</td>
      <td>25 to 34</td>
    </tr>
    <tr>
      <th>freq</th>
      <td>3</td>
      <td>59</td>
      <td>NaN</td>
      <td>8239</td>
      <td>13655</td>
      <td>NaN</td>
      <td>59</td>
      <td>NaN</td>
      <td>8248</td>
      <td>13638</td>
      <td>NaN</td>
      <td>69170</td>
      <td>9675</td>
      <td>3214</td>
      <td>3214</td>
      <td>35475</td>
      <td>50135</td>
      <td>24861</td>
    </tr>
    <tr>
      <th>mean</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>2018.214772</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>13.750474</td>
      <td>NaN</td>
      <td>2018.213191</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>13.680373</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>std</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>2.426461</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>5.902043</td>
      <td>NaN</td>
      <td>2.427254</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>5.789953</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>min</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>2014.000000</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>1.000000</td>
      <td>NaN</td>
      <td>2002.000000</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>1.000000</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>25%</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>2016.000000</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>10.000000</td>
      <td>NaN</td>
      <td>2016.000000</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>10.000000</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>50%</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>2018.000000</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>14.000000</td>
      <td>NaN</td>
      <td>2018.000000</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>14.000000</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>75%</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>2020.000000</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>18.000000</td>
      <td>NaN</td>
      <td>2020.000000</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>18.000000</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>max</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>2022.000000</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>23.000000</td>
      <td>NaN</td>
      <td>2022.000000</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>23.000000</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>There’s a lot here that is immediately interesting. A few observations:</p>
<ul>
<li>There have been a lot of <em>Mental Health Act</em> apprehensions in Toronto. This dataset reports 87,907 arrests between 2014 and 2022.</li>
<li>Apprehsnions are a mid-day phenomena, with most detentions six hours before or after 1PM.</li>
<li>The top month for apprehensions is May, and the top day of the week for arrests is Thursday.</li>
<li>More men were arrested than women, and the top age demographic for arrests is 25-34.</li>
</ul>
<p>We can visualize some other trends.</p>
</section>
<section id="year-over-year-increases" class="level2">
<h2 class="anchored" data-anchor-id="year-over-year-increases">Year over year increases</h2>
<p>We can chart the change year over year and parse out reports regarding the person’s gender.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">gender_year <span class="op" style="color: #5E5E5E;">=</span> df.groupby(<span class="st" style="color: #20794D;">'ReportYear'</span>)[<span class="st" style="color: #20794D;">'Sex'</span>].value_counts().to_frame().rename(columns<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'Sex'</span>:<span class="st" style="color: #20794D;">'Total'</span>})</span>
<span id="cb4-2">so.Plot(gender_year, x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'ReportYear'</span>, y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Total'</span>, color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Sex'</span>).add(so.Line())</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://obiter.ai/blog/posts/2022-10-22-civil-mental-health-apprehensions/index_files/figure-html/cell-5-output-1.png" width="755" height="445"></p>
</div>
</div>
<p>Between 2014 and 2021 <em>Mental Health Act</em> arrests almost doubled. It also looks like that rate of increase is slightly higher for men over women, but we will have to look a bit closer to be sure. It also looks like there was a marked uptick of arrests in 2021. Perhaps this is related to the pandemic?</p>
<p>Why the steep drop off in 2022? The year is not over yet!</p>
</section>
<section id="age-group-differences" class="level2">
<h2 class="anchored" data-anchor-id="age-group-differences">Age group differences</h2>
<p>We can look at different age categories:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">age_year <span class="op" style="color: #5E5E5E;">=</span> df.groupby(<span class="st" style="color: #20794D;">'ReportYear'</span>)[<span class="st" style="color: #20794D;">'AgeGroup'</span>].value_counts().to_frame().rename(columns<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'AgeGroup'</span>:<span class="st" style="color: #20794D;">'Total'</span>})</span>
<span id="cb5-2">so.Plot(age_year, x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'ReportYear'</span>, y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Total'</span>, color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'AgeGroup'</span>).add(so.Line())</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://obiter.ai/blog/posts/2022-10-22-civil-mental-health-apprehensions/index_files/figure-html/cell-6-output-1.png" width="755" height="445"></p>
</div>
</div>
<p>The 25-34 age group is far and away the largest plurality of cases.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">filt <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'ReportYear'</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">2021</span></span>
<span id="cb6-2">df[filt][<span class="st" style="color: #20794D;">'AgeGroup'</span>].value_counts(normalize<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>25 to 34        0.302505
35 to 44        0.203738
18 to 24        0.183327
45 to 54        0.122542
55 to 64        0.104000
65+             0.074841
Not Recorded    0.009047
Name: AgeGroup, dtype: float64</code></pre>
</div>
</div>
</section>
<section id="location-of-arrest" class="level2">
<h2 class="anchored" data-anchor-id="location-of-arrest">Location of arrest</h2>
<p>People can get arrested in all sorts of places. Let’s see where individuals are apprehended:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">prem_year <span class="op" style="color: #5E5E5E;">=</span> df.groupby(<span class="st" style="color: #20794D;">'ReportYear'</span>)[<span class="st" style="color: #20794D;">'PremisesType'</span>].value_counts().to_frame().rename(columns<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'PremisesType'</span>:<span class="st" style="color: #20794D;">'Total'</span>})</span>
<span id="cb8-2">so.Plot(prem_year, x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'ReportYear'</span>, y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Total'</span>, color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'PremisesType'</span>).add(so.Line())</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://obiter.ai/blog/posts/2022-10-22-civil-mental-health-apprehensions/index_files/figure-html/cell-8-output-1.png" width="743" height="445"></p>
</div>
</div>
<p>This is a surprising and interesting visualization because I did not expect apartments — peoples’ homes — to be the main site of arrest. This implies that people are being arrested after they or someone in their household calls for help.</p>
</section>
<section id="time-of-year-day-of-week-and-time-of-day" class="level2">
<h2 class="anchored" data-anchor-id="time-of-year-day-of-week-and-time-of-day">Time of year, day of week, and time of day</h2>
<p>Different months:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">month <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'OccurrenceMonth'</span>].value_counts(normalize<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>).to_frame()</span>
<span id="cb9-2">month <span class="op" style="color: #5E5E5E;">=</span> month.reindex([<span class="st" style="color: #20794D;">"January"</span>, <span class="st" style="color: #20794D;">"February"</span>, <span class="st" style="color: #20794D;">"March"</span>, <span class="st" style="color: #20794D;">'April'</span>, <span class="st" style="color: #20794D;">'May'</span>,<span class="st" style="color: #20794D;">'June'</span>,<span class="st" style="color: #20794D;">'July'</span>,<span class="st" style="color: #20794D;">'August'</span>,<span class="st" style="color: #20794D;">'September'</span>,<span class="st" style="color: #20794D;">'October'</span>,<span class="st" style="color: #20794D;">'November'</span>,<span class="st" style="color: #20794D;">'December'</span>])</span>
<span id="cb9-3">so.Plot(month, x<span class="op" style="color: #5E5E5E;">=</span>month.index, y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'OccurrenceMonth'</span>).add(so.Line())</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://obiter.ai/blog/posts/2022-10-22-civil-mental-health-apprehensions/index_files/figure-html/cell-9-output-1.png" width="598" height="445"></p>
</div>
</div>
<p>This shows that March, April, May, and June are the biggest months for arrests.</p>
<p>Different days:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">day_week <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'OccurrenceDayofWeek'</span>].value_counts().to_frame()</span>
<span id="cb10-2">day_week <span class="op" style="color: #5E5E5E;">=</span> day_week.reindex([<span class="st" style="color: #20794D;">'Monday    '</span>, <span class="st" style="color: #20794D;">'Tuesday   '</span>,<span class="st" style="color: #20794D;">'Wednesday '</span>,<span class="st" style="color: #20794D;">'Thursday  '</span>,<span class="st" style="color: #20794D;">'Friday    '</span>,<span class="st" style="color: #20794D;">'Saturday  '</span>,<span class="st" style="color: #20794D;">'Sunday    '</span>])</span>
<span id="cb10-3">so.Plot(day_week,x<span class="op" style="color: #5E5E5E;">=</span>day_week.index,y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'OccurrenceDayofWeek'</span>).add(so.Line())</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://obiter.ai/blog/posts/2022-10-22-civil-mental-health-apprehensions/index_files/figure-html/cell-10-output-1.png" width="599" height="445"></p>
</div>
</div>
<p>There’s a huge drop off in arrests on the weekend.</p>
</section>
<section id="legal-bases-for-the-apprehension" class="level2">
<h2 class="anchored" data-anchor-id="legal-bases-for-the-apprehension">Legal bases for the apprehension</h2>
<p>Under what authority are people getting arrested?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">app_type <span class="op" style="color: #5E5E5E;">=</span> df.groupby(<span class="st" style="color: #20794D;">'ReportYear'</span>)[<span class="st" style="color: #20794D;">'ApprehensionType'</span>].value_counts(normalize<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>).to_frame(name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'total'</span>).reset_index()</span>
<span id="cb11-2">so.Plot(app_type, x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'ReportYear'</span>, y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'total'</span>, color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'ApprehensionType'</span>).add(so.Line())</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://obiter.ai/blog/posts/2022-10-22-civil-mental-health-apprehensions/index_files/figure-html/cell-11-output-1.png" width="870" height="445"></p>
</div>
</div>
<p>This is by far the most interesting graphic. <a href="https://www.canlii.org/en/on/laws/stat/rso-1990-c-m7/latest/rso-1990-c-m7.html">Section 17</a> of the <em>Mental Health Act</em> gives the police the power to arrest people in some circumstances because of their psychiatric condition. The police use of this power has steadily increased. Is this because they are charging fewer people criminally (and diverting them from the criminal justice system)? Is it that calls are on the rise? Further (interesting) research is required.</p>


</section>

 ]]></description>
  <guid>https://obiter.ai/blog/posts/2022-10-22-civil-mental-health-apprehensions/index.html</guid>
  <pubDate>Fri, 21 Oct 2022 00:00:00 GMT</pubDate>
  <media:content url="https://obiter.ai/blog/posts/2022-10-22-civil-mental-health-apprehensions/arrest_location.png" medium="image" type="image/png" height="86" width="144"/>
</item>
<item>
  <title>Toronto Apartment Building Age</title>
  <dc:creator>Simon Wallace</dc:creator>
  <link>https://obiter.ai/blog/posts/2022-10-24-toronto-apartments/index.html</link>
  <description><![CDATA[ 



<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->
<section id="charting-apartment-constructions-booms-and-busts" class="level2">
<h2 class="anchored" data-anchor-id="charting-apartment-constructions-booms-and-busts">Charting apartment constructions booms and busts</h2>
<p>When were Toronto apartment buildings constructed and how have trends in density changed over time? In this notebook I present visualizations answering these questions. My main goal is to show how Python and computational approaches to research can be simply, quickly, and effecitively leveraged to answer important questions.</p>
<section id="the-problem" class="level3">
<h3 class="anchored" data-anchor-id="the-problem">The problem</h3>
<p>Almost <a href="https://www.cbc.ca/news/canada/toronto/toronto-highrise-living-by-the-numbers-1.4127019">50% of Torontonians live</a> in rental units. The age of those units matters: older units may require more maintenance and if new units are not being built housing stock might age out. Can we programmatically develop an understanding of the age, nature, and geographic distribution of Toronto’s apartment buildings?</p>
</section>
<section id="the-dataset" class="level3">
<h3 class="anchored" data-anchor-id="the-dataset">The dataset</h3>
<p>In 2017, the City of Toronto launched the <a href="https://www.toronto.ca/community-people/housing-shelter/rental-housing-tenant-information/rental-housing-standards/apartment-building-standards/">RentSafeTO</a> program. Its object is ensure that tenants live in “safe, well-maintained buildings” by subjecting properties to regular inspections. Owners of properties that fail to meet City of Toronto standards face financial penalities for non-compliance.</p>
<p>The City reports on its enforcement and inspection efforts through its <a href="https://open.toronto.ca/dataset/apartment-building-registration/">open data portal</a>. The dataset includes, <em>inter alia</em>, information about:</p>
<ul>
<li>the size of buildings,</li>
<li>outcomes of inspections,</li>
<li>the scores of each inspection,</li>
<li>the location of each building, and</li>
<li>the height of each building.</li>
</ul>
</section>
<section id="using-the-data" class="level3">
<h3 class="anchored" data-anchor-id="using-the-data">Using the data</h3>
<p>To explore the data, we are going to use two popular libraries: pandas and seaborn.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> seaborn <span class="im" style="color: #00769E;">as</span> sns</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> seaborn.objects <span class="im" style="color: #00769E;">as</span> so</span></code></pre></div>
</div>
<p>We begin by loading the information from the City of Toronto.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">df <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(<span class="st" style="color: #20794D;">'https://ckan0.cf.opendata.inter.prod-toronto.ca/dataset/4ef82789-e038-44ef-a478-a8f3590c3eb1/resource/979fb513-5186-41e9-bb23-7b5cc6b89915/download/Apartment%20Building</span><span class="sc" style="color: #5E5E5E;">%20E</span><span class="st" style="color: #20794D;">valuation.csv'</span>)</span></code></pre></div>
</div>
<p>This gives us a dataframe (a ‘df’), which is basically a spreadsheet. Let’s take a look at the first three rows:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">df.head(<span class="dv" style="color: #AD0000;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>_id</th>
      <th>RSN</th>
      <th>YEAR_REGISTERED</th>
      <th>YEAR_EVALUATED</th>
      <th>YEAR_BUILT</th>
      <th>PROPERTY_TYPE</th>
      <th>WARD</th>
      <th>WARDNAME</th>
      <th>SITE_ADDRESS</th>
      <th>CONFIRMED_STOREYS</th>
      <th>...</th>
      <th>EXTERIOR_WALKWAYS</th>
      <th>BALCONY_GUARDS</th>
      <th>WATER_PEN_EXT_BLDG_ELEMENTS</th>
      <th>PARKING_AREA</th>
      <th>OTHER_FACILITIES</th>
      <th>GRID</th>
      <th>LATITUDE</th>
      <th>LONGITUDE</th>
      <th>X</th>
      <th>Y</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1577658</td>
      <td>4155099</td>
      <td>2017.0</td>
      <td>NaN</td>
      <td>1951.0</td>
      <td>PRIVATE</td>
      <td>5</td>
      <td>York South-Weston</td>
      <td>60 CLEARVIEW HTS</td>
      <td>4</td>
      <td>...</td>
      <td>4.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>3.0</td>
      <td>NaN</td>
      <td>W0532</td>
      <td>43.692977</td>
      <td>-79.481347</td>
      <td>306287.792</td>
      <td>4839003.552</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1577659</td>
      <td>4154772</td>
      <td>2017.0</td>
      <td>NaN</td>
      <td>1989.0</td>
      <td>SOCIAL HOUSING</td>
      <td>16</td>
      <td>Don Valley East</td>
      <td>7 THE DONWAY E</td>
      <td>4</td>
      <td>...</td>
      <td>5.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>N1627</td>
      <td>43.733247</td>
      <td>-79.339561</td>
      <td>317708.903</td>
      <td>4843488.607</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1577660</td>
      <td>4153788</td>
      <td>2019.0</td>
      <td>NaN</td>
      <td>1962.0</td>
      <td>PRIVATE</td>
      <td>15</td>
      <td>Don Valley West</td>
      <td>365 EGLINTON AVE E</td>
      <td>7</td>
      <td>...</td>
      <td>4.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>NaN</td>
      <td>N1530</td>
      <td>43.709092</td>
      <td>-79.385527</td>
      <td>314009.544</td>
      <td>4840800.059</td>
    </tr>
  </tbody>
</table>
<p>3 rows × 40 columns</p>
</div>
</div>
</div>
<p>This is a big dataset:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'The spreadsheet is </span><span class="sc" style="color: #5E5E5E;">{</span>df<span class="sc" style="color: #5E5E5E;">.</span>shape[<span class="dv" style="color: #AD0000;">0</span>]<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> rows by </span><span class="sc" style="color: #5E5E5E;">{</span>df<span class="sc" style="color: #5E5E5E;">.</span>shape[<span class="dv" style="color: #AD0000;">1</span>]<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> columns.'</span>)</span>
<span id="cb4-2"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'Here is a list of all the columns:'</span>)</span>
<span id="cb4-3"><span class="bu" style="color: null;">print</span>(df.columns)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The spreadsheet is 10371 rows by 40 columns.
Here is a list of all the columns:
Index(['_id', 'RSN', 'YEAR_REGISTERED', 'YEAR_EVALUATED', 'YEAR_BUILT',
       'PROPERTY_TYPE', 'WARD', 'WARDNAME', 'SITE_ADDRESS',
       'CONFIRMED_STOREYS', 'CONFIRMED_UNITS', 'EVALUATION_COMPLETED_ON',
       'SCORE', 'RESULTS_OF_SCORE', 'NO_OF_AREAS_EVALUATED', 'ENTRANCE_LOBBY',
       'ENTRANCE_DOORS_WINDOWS', 'SECURITY', 'STAIRWELLS', 'LAUNDRY_ROOMS',
       'INTERNAL_GUARDS_HANDRAILS', 'GARBAGE_CHUTE_ROOMS',
       'GARBAGE_BIN_STORAGE_AREA', 'ELEVATORS', 'STORAGE_AREAS_LOCKERS',
       'INTERIOR_WALL_CEILING_FLOOR', 'INTERIOR_LIGHTING_LEVELS', 'GRAFFITI',
       'EXTERIOR_CLADDING', 'EXTERIOR_GROUNDS', 'EXTERIOR_WALKWAYS',
       'BALCONY_GUARDS', 'WATER_PEN_EXT_BLDG_ELEMENTS', 'PARKING_AREA',
       'OTHER_FACILITIES', 'GRID', 'LATITUDE', 'LONGITUDE', 'X', 'Y'],
      dtype='object')</code></pre>
</div>
</div>
<p>I’ve poked around and noticed that there are some duplicate entries because some buildings were inspected multiple times. To get a cleaner dataset, we will eliminate duplicate entries. After looking at the dataset’s <a href="https://open.toronto.ca/dataset/apartment-building-registration/">data dictionary</a> I learned that the ‘RSN’ is a unique number assigned to each building. We will drop any duplicate RSN rows and then isolate for a few columns.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">df.sort_values(by<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'YEAR_EVALUATED'</span>])</span>
<span id="cb6-2">df.drop_duplicates(subset<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'RSN'</span>], inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, keep<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'last'</span>)</span></code></pre></div>
</div>
<p>I am only interested in a few columns, so I will drop everything that isn’t directly relevant.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">df <span class="op" style="color: #5E5E5E;">=</span> df[[<span class="st" style="color: #20794D;">'YEAR_BUILT'</span>,<span class="st" style="color: #20794D;">'CONFIRMED_STOREYS'</span>,<span class="st" style="color: #20794D;">'CONFIRMED_UNITS'</span>,<span class="st" style="color: #20794D;">'X'</span>, <span class="st" style="color: #20794D;">'Y'</span>]]</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">df.shape</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>(3482, 5)</code></pre>
</div>
</div>
<p>Wow! That eliminated a lot of information. Now our dataset describes 3482 apartment buildings. We can get some summary information:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">df[<span class="st" style="color: #20794D;">'YEAR_BUILT'</span>].describe()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>count    3463.000000
mean     1961.985850
std        19.281208
min      1805.000000
25%      1955.000000
50%      1962.000000
75%      1970.000000
max      2021.000000
Name: YEAR_BUILT, dtype: float64</code></pre>
</div>
</div>
<p>This is interesting! The average building is about 60 years old, the oldest building was built in 1805, and 68% of apartment buildings in Toronto were contructed between 1943 and 1981.</p>
</section>
</section>
<section id="visualize-the-data" class="level2">
<h2 class="anchored" data-anchor-id="visualize-the-data">Visualize the Data</h2>
<p>Let’s get a better feel for what’s in the dataset by visualizing it. We will begin by plotting the coorindates of each building onto a scatter plot. I’ve coded the program to output larger points for buildings with more units.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">(</span>
<span id="cb12-2">    so.Plot(df, x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"X"</span>, y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Y"</span>, pointsize<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'CONFIRMED_UNITS'</span>)</span>
<span id="cb12-3">    .add(so.Dot())</span>
<span id="cb12-4">    .label(</span>
<span id="cb12-5">        x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'X coordinates'</span>,</span>
<span id="cb12-6">        y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Y coordinates'</span>,</span>
<span id="cb12-7">        title<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Toronto Apartment Buildings'</span>)</span>
<span id="cb12-8">)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://obiter.ai/blog/posts/2022-10-24-toronto-apartments/index_files/figure-html/cell-10-output-1.png" width="777" height="445"></p>
</div>
</div>
<p>This appears to show — and this passes the gut check — that the tallest apartment buuildings are clustered downtown and that apartment buildings are spread out along major arteries.</p>
<p>Now let’s visualize the age of the buildings.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">(</span>
<span id="cb13-2">    so.Plot(df, x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"YEAR_BUILT"</span>)</span>
<span id="cb13-3">    .add(so.Bars(), so.Hist())</span>
<span id="cb13-4">)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://obiter.ai/blog/posts/2022-10-24-toronto-apartments/index_files/figure-html/cell-11-output-1.png" width="599" height="445"></p>
</div>
</div>
<p>This shows a huge building boom in the 50s and 60s, that suddenly dropped off in the 70s. But do fewer new buildings mean fewer new units? Let’s check by manipulating the data a bit. This next graph will visulize the total number of units built each year:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">units_per_year <span class="op" style="color: #5E5E5E;">=</span> df.groupby(<span class="st" style="color: #20794D;">'YEAR_BUILT'</span>)[<span class="st" style="color: #20794D;">"CONFIRMED_UNITS"</span>].<span class="bu" style="color: null;">sum</span>().to_frame()</span>
<span id="cb14-2">so.Plot(units_per_year, x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'YEAR_BUILT'</span>, y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'CONFIRMED_UNITS'</span>).add(so.Line())</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://obiter.ai/blog/posts/2022-10-24-toronto-apartments/index_files/figure-html/cell-12-output-1.png" width="599" height="445"></p>
</div>
</div>
<p>This more or less correlates with the total number of buildings built. But have the buildings changed? Let’s look to see what the average number of units for a building built each year is:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">average_units_per_building_per_year <span class="op" style="color: #5E5E5E;">=</span> df.groupby(<span class="st" style="color: #20794D;">'YEAR_BUILT'</span>)[<span class="st" style="color: #20794D;">"CONFIRMED_UNITS"</span>].mean().to_frame()</span>
<span id="cb15-2">so.Plot(average_units_per_building_per_year, x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'YEAR_BUILT'</span>, y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'CONFIRMED_UNITS'</span>).add(so.Line())</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://obiter.ai/blog/posts/2022-10-24-toronto-apartments/index_files/figure-html/cell-13-output-1.png" width="599" height="445"></p>
</div>
</div>
<p>This is really interesting! From 1960 to 2000, the average number of units in a new build steadily decresed, only to suddenly rebound and later climb.</p>
</section>
<section id="questions-for-future-research" class="level2">
<h2 class="anchored" data-anchor-id="questions-for-future-research">Questions for future research</h2>
<p>These visualizations leave me with more questions than answers. What happened in 2000 that encouraged developers to build apartment buildings with more units? Do taller buildings portend a meaningful increase in available rental housing stock in Toronto or, at the 1960s would suggest, is the only way to increase the number of rental units to build more buildings?</p>


</section>

 ]]></description>
  <guid>https://obiter.ai/blog/posts/2022-10-24-toronto-apartments/index.html</guid>
  <pubDate>Fri, 21 Oct 2022 00:00:00 GMT</pubDate>
  <media:content url="https://obiter.ai/blog/posts/2022-10-24-toronto-apartments/map.png" medium="image" type="image/png" height="83" width="144"/>
</item>
</channel>
</rss>
